// Created with SRC-ASM (https://github.com/davlaf/elec374-assembler)
  @0 09800065 // ldi   R3, 0x65    ; R3 = 0x65
  @1 09980003 // ldi   R3, 3(R3)   ; R3 = 0x68
  @2 01000054 // ld    R2, 0x54    ; R2 = (0x54) = 0x97
  @3 09100001 // ldi   R2, 1(R2)   ; R2 = 0x98
  @4 0017FFFA // ld    R0, -6(R2)  ; R0 = (0x92) = 0x46
  @5 08800003 // ldi   R1, 3       ; R1 = 3
  @6 09800057 // ldi   R3, 0x57    ; R3 = 0x57
  @7 99980003 // brmi  R3, 3       ; continue with the next instruction (will not branch)
  @8 09980003 // ldi   R3, 3(R3)   ; R3 = 0x5A
  @9 021FFFFA // ld    R4, -6(R3)  ; R4 = (0x5A - 6) = 0x97
  @A D0000000 // nop               
  @B 9A100002 // brpl  R4, 2       ; continue with the instruction at target (will branch)
  @C 0B180007 // ldi   R6, 7(R3)   ; this instruction will not execute
  @D 0AB7FFFC // ldi   R5, -4(R6)  ; this instruction will not execute
//   target:
  @E 19988000 // add   R3, R3, R1  ; R3 = 0x5D
  @F 62200002 // addi  R4, R4, 2   ; R4 = 0x99
 @10 8A200000 // neg   R4, R4      ; R4 = 0xFFFFFF67
 @11 92200000 // not   R4, R4      ; R4 = 0x98
 @12 6A20000F // andi  R4, R4, 0xF ; R4 = 8
 @13 39008000 // ror   R2, R0, R1  ; R2 = 0xC0000008
 @14 72100007 // ori   R4, R2, 7   ; R4 = 0xC000000F
 @15 51208000 // shra  R2, R4, R1  ; R2 = 0xF8000001
 @16 49988000 // shr   R3, R3, R1  ; R3 = 0xB
 @17 11800092 // st    0x92, R3    ; (0x92) = 0xB new value in memory with address 0x92
 @18 41808000 // rol   R3, R0, R1  ; R3 = 0x230
 @19 32880000 // or    R5, R1, R0  ; R5 = 0x47
 @1A 29180000 // and   R2, R3, R0  ; R2 = 0
 @1B 12900054 // st    0x54(R2), R5; (0x54) = 0x47 new value in memory with address 0x54
 @1C 201A8000 // sub   R0, R3, R5  ; R0 = 0x1E9
 @1D 59188000 // shl   R2, R3, R1  ; R2 = 0x1180
 @1E 0A800008 // ldi   R5, 8       ; R5 = 8
 @1F 0B000017 // ldi   R6, 0x17    ; R6 = 0x17
 @20 83280000 // mul   R6, R5      ; HI = 0; LO = 0xB8
 @21 CA000000 // mfhi  R4          ; R4 = 0
 @22 C3800000 // mflo  R7          ; R7 = 0xB8
 @23 7B280000 // div   R6, R5      ; HI = 7, LO = 2
 @24 0D280001 // ldi   R10, 1(R5)  ; R10 = 9 setting up argument registers
 @25 0DB7FFFD // ldi   R11, -3(R6) ; R11 = 0x14 R10, R11, R12, and R13
 @26 0E380001 // ldi   R12, 1(R7)  ; R12 = 0xB9
 @27 0EA00004 // ldi   R13, 4(R4)  ; R13 = 4
 @28 A6000000 // jal   R12         ; address of subroutine subA in R12 - return address in R8
 @29 D8000000 // halt              ; upon return, the program halts
 @2A 00000000
 @2B 00000000
 @2C 00000000
 @2D 00000000
 @2E 00000000
 @2F 00000000
 @30 00000000
 @31 00000000
 @32 00000000
 @33 00000000
 @34 00000000
 @35 00000000
 @36 00000000
 @37 00000000
 @38 00000000
 @39 00000000
 @3A 00000000
 @3B 00000000
 @3C 00000000
 @3D 00000000
 @3E 00000000
 @3F 00000000
 @40 00000000
 @41 00000000
 @42 00000000
 @43 00000000
 @44 00000000
 @45 00000000
 @46 00000000
 @47 00000000
 @48 00000000
 @49 00000000
 @4A 00000000
 @4B 00000000
 @4C 00000000
 @4D 00000000
 @4E 00000000
 @4F 00000000
 @50 00000000
 @51 00000000
 @52 00000000
 @53 00000000
 @54 00000097 // WORD  0x97        ; initialize memory as asked
 @55 00000000
 @56 00000000
 @57 00000000
 @58 00000000
 @59 00000000
 @5A 00000000
 @5B 00000000
 @5C 00000000
 @5D 00000000
 @5E 00000000
 @5F 00000000
 @60 00000000
 @61 00000000
 @62 00000000
 @63 00000000
 @64 00000000
 @65 00000000
 @66 00000000
 @67 00000000
 @68 00000000
 @69 00000000
 @6A 00000000
 @6B 00000000
 @6C 00000000
 @6D 00000000
 @6E 00000000
 @6F 00000000
 @70 00000000
 @71 00000000
 @72 00000000
 @73 00000000
 @74 00000000
 @75 00000000
 @76 00000000
 @77 00000000
 @78 00000000
 @79 00000000
 @7A 00000000
 @7B 00000000
 @7C 00000000
 @7D 00000000
 @7E 00000000
 @7F 00000000
 @80 00000000
 @81 00000000
 @82 00000000
 @83 00000000
 @84 00000000
 @85 00000000
 @86 00000000
 @87 00000000
 @88 00000000
 @89 00000000
 @8A 00000000
 @8B 00000000
 @8C 00000000
 @8D 00000000
 @8E 00000000
 @8F 00000000
 @90 00000000
 @91 00000000
 @92 00000046 // WORD  0x46        
 @93 00000000
 @94 00000000
 @95 00000000
 @96 00000000
 @97 00000000
 @98 00000000
 @99 00000000
 @9A 00000000
 @9B 00000000
 @9C 00000000
 @9D 00000000
 @9E 00000000
 @9F 00000000
 @A0 00000000
 @A1 00000000
 @A2 00000000
 @A3 00000000
 @A4 00000000
 @A5 00000000
 @A6 00000000
 @A7 00000000
 @A8 00000000
 @A9 00000000
 @AA 00000000
 @AB 00000000
 @AC 00000000
 @AD 00000000
 @AE 00000000
 @AF 00000000
 @B0 00000000
 @B1 00000000
 @B2 00000000
 @B3 00000000
 @B4 00000000
 @B5 00000000
 @B6 00000000
 @B7 00000000
 @B8 00000000
//   subA:
 @B9 1FD60000 // add   R15, R10, R12; procedure subA ; R14 and R15 are return value registers
 @BA 275E8000 // sub   R14, R11, R13; R15 = 0xC2, R14 = 0x10
 @BB 27FF0000 // sub   R15, R15, R14; R15 = 0xB2
 @BC AC000000 // jr    R8          ; return from procedure
 @BD 00000000
 @BE 00000000
 @BF 00000000
 @C0 00000000
 @C1 00000000
 @C2 00000000
 @C3 00000000
 @C4 00000000
 @C5 00000000
 @C6 00000000
 @C7 00000000
 @C8 00000000
 @C9 00000000
 @CA 00000000
 @CB 00000000
 @CC 00000000
 @CD 00000000
 @CE 00000000
 @CF 00000000
 @D0 00000000
 @D1 00000000
 @D2 00000000
 @D3 00000000
 @D4 00000000
 @D5 00000000
 @D6 00000000
 @D7 00000000
 @D8 00000000
 @D9 00000000
 @DA 00000000
 @DB 00000000
 @DC 00000000
 @DD 00000000
 @DE 00000000
 @DF 00000000
 @E0 00000000
 @E1 00000000
 @E2 00000000
 @E3 00000000
 @E4 00000000
 @E5 00000000
 @E6 00000000
 @E7 00000000
 @E8 00000000
 @E9 00000000
 @EA 00000000
 @EB 00000000
 @EC 00000000
 @ED 00000000
 @EE 00000000
 @EF 00000000
 @F0 00000000
 @F1 00000000
 @F2 00000000
 @F3 00000000
 @F4 00000000
 @F5 00000000
 @F6 00000000
 @F7 00000000
 @F8 00000000
 @F9 00000000
 @FA 00000000
 @FB 00000000
 @FC 00000000
 @FD 00000000
 @FE 00000000
 @FF 00000000
@100 00000000
@101 00000000
@102 00000000
@103 00000000
@104 00000000
@105 00000000
@106 00000000
@107 00000000
@108 00000000
@109 00000000
@10A 00000000
@10B 00000000
@10C 00000000
@10D 00000000
@10E 00000000
@10F 00000000
@110 00000000
@111 00000000
@112 00000000
@113 00000000
@114 00000000
@115 00000000
@116 00000000
@117 00000000
@118 00000000
@119 00000000
@11A 00000000
@11B 00000000
@11C 00000000
@11D 00000000
@11E 00000000
@11F 00000000
@120 00000000
@121 00000000
@122 00000000
@123 00000000
@124 00000000
@125 00000000
@126 00000000
@127 00000000
@128 00000000
@129 00000000
@12A 00000000
@12B 00000000
@12C 00000000
@12D 00000000
@12E 00000000
@12F 00000000
@130 00000000
@131 00000000
@132 00000000
@133 00000000
@134 00000000
@135 00000000
@136 00000000
@137 00000000
@138 00000000
@139 00000000
@13A 00000000
@13B 00000000
@13C 00000000
@13D 00000000
@13E 00000000
@13F 00000000
@140 00000000
@141 00000000
@142 00000000
@143 00000000
@144 00000000
@145 00000000
@146 00000000
@147 00000000
@148 00000000
@149 00000000
@14A 00000000
@14B 00000000
@14C 00000000
@14D 00000000
@14E 00000000
@14F 00000000
@150 00000000
@151 00000000
@152 00000000
@153 00000000
@154 00000000
@155 00000000
@156 00000000
@157 00000000
@158 00000000
@159 00000000
@15A 00000000
@15B 00000000
@15C 00000000
@15D 00000000
@15E 00000000
@15F 00000000
@160 00000000
@161 00000000
@162 00000000
@163 00000000
@164 00000000
@165 00000000
@166 00000000
@167 00000000
@168 00000000
@169 00000000
@16A 00000000
@16B 00000000
@16C 00000000
@16D 00000000
@16E 00000000
@16F 00000000
@170 00000000
@171 00000000
@172 00000000
@173 00000000
@174 00000000
@175 00000000
@176 00000000
@177 00000000
@178 00000000
@179 00000000
@17A 00000000
@17B 00000000
@17C 00000000
@17D 00000000
@17E 00000000
@17F 00000000
@180 00000000
@181 00000000
@182 00000000
@183 00000000
@184 00000000
@185 00000000
@186 00000000
@187 00000000
@188 00000000
@189 00000000
@18A 00000000
@18B 00000000
@18C 00000000
@18D 00000000
@18E 00000000
@18F 00000000
@190 00000000
@191 00000000
@192 00000000
@193 00000000
@194 00000000
@195 00000000
@196 00000000
@197 00000000
@198 00000000
@199 00000000
@19A 00000000
@19B 00000000
@19C 00000000
@19D 00000000
@19E 00000000
@19F 00000000
@1A0 00000000
@1A1 00000000
@1A2 00000000
@1A3 00000000
@1A4 00000000
@1A5 00000000
@1A6 00000000
@1A7 00000000
@1A8 00000000
@1A9 00000000
@1AA 00000000
@1AB 00000000
@1AC 00000000
@1AD 00000000
@1AE 00000000
@1AF 00000000
@1B0 00000000
@1B1 00000000
@1B2 00000000
@1B3 00000000
@1B4 00000000
@1B5 00000000
@1B6 00000000
@1B7 00000000
@1B8 00000000
@1B9 00000000
@1BA 00000000
@1BB 00000000
@1BC 00000000
@1BD 00000000
@1BE 00000000
@1BF 00000000
@1C0 00000000
@1C1 00000000
@1C2 00000000
@1C3 00000000
@1C4 00000000
@1C5 00000000
@1C6 00000000
@1C7 00000000
@1C8 00000000
@1C9 00000000
@1CA 00000000
@1CB 00000000
@1CC 00000000
@1CD 00000000
@1CE 00000000
@1CF 00000000
@1D0 00000000
@1D1 00000000
@1D2 00000000
@1D3 00000000
@1D4 00000000
@1D5 00000000
@1D6 00000000
@1D7 00000000
@1D8 00000000
@1D9 00000000
@1DA 00000000
@1DB 00000000
@1DC 00000000
@1DD 00000000
@1DE 00000000
@1DF 00000000
@1E0 00000000
@1E1 00000000
@1E2 00000000
@1E3 00000000
@1E4 00000000
@1E5 00000000
@1E6 00000000
@1E7 00000000
@1E8 00000000
@1E9 00000000
@1EA 00000000
@1EB 00000000
@1EC 00000000
@1ED 00000000
@1EE 00000000
@1EF 00000000
@1F0 00000000
@1F1 00000000
@1F2 00000000
@1F3 00000000
@1F4 00000000
@1F5 00000000
@1F6 00000000
@1F7 00000000
@1F8 00000000
@1F9 00000000
@1FA 00000000
@1FB 00000000
@1FC 00000000
@1FD 00000000
@1FE 00000000
@1FF 00000000
// Created with SRC-ASM (https://github.com/davlaf/elec374-assembler)